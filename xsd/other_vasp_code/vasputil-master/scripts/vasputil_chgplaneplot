#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2008, 2009, 2010 Janne Blomqvist

# This source code file is subject to the terms of the MIT (Expat)
# License. See the file LICENSE for details.

"""Plot charge density in a plane as created by lev00"""

from optparse import OptionParser

import matplotlib.pyplot as plt
import numpy as np
import vasputil.chg as vc

usage = """%prog [options] datfile

datfile is the charge density in a plane, as created by lev00."""

parser = OptionParser(usage)
parser.add_option('-o', '--output', dest='output', help='Output to file \
instead of displaying the image. The format is deduced from the extension \
of the filename; supported are eps, jpeg, pdf, png, ps, svg')
parser.add_option('-m', '--color-map', dest='cm', help='Colormap, see the \
list at http://www.scipy.org/Cookbook/Matplotlib/Show_colormaps')
parser.add_option('-n', '--normalize', dest='norm', help='Normalize color map. \
If the argument length is 2, use the values for the upper and lower maximum \
values. If length != 0, normalize such that 0 is in the middle; if the argument is a number, that will be the maximum and minimum values, if not, the maximum values in the file will be used.')
parser.add_option('-i', '--inverse', dest='inverse', action='store_true',
                  help='Inverse the colormap')
parser.add_option('-c', '--contour', dest='contour', action='store_true',
                  help='Make a contour plot rather than the default \
                  pseudocolor plot')
parser.add_option('-f', '--filled-contour', dest='fc', action='store_true',
                  help='Make a filled contour plot rather than the default \
                  pseudocolor plot')
parser.add_option('-b', '--bw-contour', dest='bw', action='store_true',
                  help='Make a black-and-white contour plot')
parser.add_option('-l', '--levels', dest='levels', help='Number of levels for contour plots. Alternatively, if the argument is a decimal number, the inter-level difference')
(options, args) = parser.parse_args()

x, y, z = vc.load_chg_plane(args[0])

# This ensures that the aspect ratio of the plot is equivalent to the array.
w, h = plt.figaspect(z.T)
fig = plt.figure(1, figsize=(w+4, h))
a = fig.add_subplot(111)
a.set_aspect(1)

# No idea how to actually inverse the colormap, so inverse the array
# of values instead
if options.inverse:
    z = z * -1

if options.cm:
    cmap = plt.get_cmap(options.cm)
else:
    cmap = plt.cm.hot # hot colormap is good for both color and BW

if options.norm:
    n = options.norm.split()
    if len(n) == 2:
        low = float(n[0])
        high = float(n[1])
    else:
        try:
            high = abs(float(n[0]))
        except ValueError:
            high = max(abs(z.max()), abs(z.min()))
        low = -high
    norm = plt.normalize(low, high)
else:
    norm = None

if options.contour or options.fc or options.bw:
    xm, ym = np.meshgrid(x, y)
    if options.levels:
        try:
            lev = int(options.levels)
        except ValueError:
            ld = float(options.levels)
            if not options.norm:
                low = z.min()
                high = z.max()
            lev = np.arange(low, high, ld)
    else:
        lev = 10
    if options.contour:
        plt.contour(xm, ym, z.T, lev, cmap=cmap, norm=norm)
    elif options.fc:
        plt.contourf(xm, ym, z.T, lev, cmap=cmap, norm=norm)
    else:
        plt.contour(xm, ym, z.T, lev, colors='k')
else:
    plt.pcolor(x, y, z.T, cmap=cmap, norm=norm)
a.set_xlim(x.min(), x.max())
a.set_ylim(y.min(), y.max())
if not options.bw:
    plt.colorbar()
# \u00c5 is the unicode literal for 'Ã…'
a.set_xlabel(u'Distance from center (\u00c5)')
a.set_ylabel(u'Distance from center (\u00c5)')
if options.output:
    plt.savefig(options.output)
else:
    plt.show()
